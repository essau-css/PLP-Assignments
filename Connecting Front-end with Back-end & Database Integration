TeleMed
├── config/
│   └── db.js              # MySQL connection setup
├── controllers/
│   ├── authController.js  # Handles authentication (login, logout)
│   ├── patientController.js # CRUD operations for patient
│   ├── doctorController.js  # CRUD operations for doctors
│   ├── appointmentController.js # Appointment booking and management
├── models/
│   ├── Patient.js         # Patient schema
│   ├── Doctor.js          # Doctor schema
│   └── Appointment.js     # Appointment schema
├── routes/
│   ├── authRoutes.js      # Auth routes
│   ├── patientRoutes.js   # Patient routes
│   ├── doctorRoutes.js    # Doctor routes
│   └── appointmentRoutes.js # Appointment routes
├── middleware/
│   └── auth.js            # Auth middleware for route protection
├── app.js                 # Main Express application
└── package.json


const express = require('express');
const router = express.Router();
const patientController = require('../controllers/patientController');

// Route to register a new patient
router.post('/register', patientController.register);

module.exports = router;


const bcrypt = require('bcrypt');
const db = require('../config/db');  // Database connection

// Register new patient
exports.register = async (req, res) => {
    try {
        const { firstName, lastName, email, password } = req.body;
        const hashedPassword = await bcrypt.hash(password, 10);

        const newPatient = await db.query(
            'INSERT INTO patients (first_name, last_name, email, password_hash) VALUES (?, ?, ?, ?)',
            [firstName, lastName, email, hashedPassword]
        );
        res.status(201).send('Patient registered successfully');
    } catch (error) {
        res.status(500).send('Error registering patient');
    }
};


const jwt = require('jsonwebtoken');

const authenticateToken = (req, res, next) => {
    const token = req.headers['authorization'];
    if (!token) return res.sendStatus(403);

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
};

module.exports = authenticateToken;


exports.bookAppointment = async (req, res) => {
    try {
        const { patientId, doctorId, appointmentDate, appointmentTime } = req.body;
        const newAppointment = await db.query(
            'INSERT INTO appointments (patient_id, doctor_id, appointment_date, appointment_time, status) VALUES (?, ?, ?, ?, "scheduled")',
            [patientId, doctorId, appointmentDate, appointmentTime]
        );
        res.status(201).send('Appointment booked successfully');
    } catch (error) {
        res.status(500).send('Error booking appointment');
    }
};



